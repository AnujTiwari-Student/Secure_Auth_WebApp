generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  password  String?
  createdAt DateTime @default(now())
  threads   Thread[]
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  role          UserRole @default(user) 
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model TwoFactorToken {
  id     String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email , token])
} 

model TwoFactorConfirmation {
  id   String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id] , onDelete: Cascade)

  @@unique([userId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Thread {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
}

model VerificationToken {
  identifier String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}

model ResetPasswordToken {
  identifier String @id @default(cuid())
  email      String
  token      String @unique
  expires    DateTime

  @@unique([email, token])
}
